{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","console","log","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86389db9.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\n\r\n\r\nexport default instance;","import Axios from 'axios';\r\nimport React, {useState, useEffect} from 'react';\r\nimport axios from './axios';\r\nimport \"./Row.css\";\r\nimport Youtube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({title, fetchUrl, isLargeRow}) {\r\n\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl,setTrailerUrl] = useState(\"\");\r\n\r\n    useEffect (() => {\r\n          async function fetchData() {\r\n          const request = await axios.get(fetchUrl);\r\n          console.log(request.data.results);\r\n          setMovies(request.data.results);\r\n          return request;\r\n          }\r\n          fetchData(); \r\n    }, [fetchUrl]);\r\n\r\n    const opts = {\r\n        height:\"390\",\r\n        width:\"100%\",\r\n        playerVars: {\r\n            autoplay:1,\r\n        },\r\n    };\r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl){\r\n            setTrailerUrl('');\r\n        } else {\r\n            movieTrailer(movie?.name || \"\")\r\n            .then((url) => {\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n               setTrailerUrl(urlParams.get(\"v\"));\r\n            })\r\n            .catch((error) => console.log(error));\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"row\">\r\n        <h2>{title}</h2>\r\n\r\n            <div className=\"row__posters\">\r\n                {/*several posters*/}\r\n                {movies.map(movie => (\r\n                    <img \r\n                    key={movie.id}\r\n                     onClick={() => handleClick(movie)}\r\n                     className ={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                     src ={`${base_url}${ isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name} />\r\n                ))}\r\n               \r\n            </div>\r\n             {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","const API_KEY = \"7de6223abd3357ae1d02d22fa782e7f0\";\r\n\r\nconst requests = {\r\nfetchTrending: `/trending/all/week?api_key=${API_KEY}&langauge=en-US`,\r\nfetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\nfetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\nfetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\nfetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\nfetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\nfetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\nfetchDocumentaries:  `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React, {useState, useEffect} from 'react';\r\nimport axios from './axios';\r\nimport requests from './requests'\r\nimport './Banner.css'\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n    useEffect(() => {\r\n        async function fetchData(){\r\n\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie( \r\n                request.data.results[\r\n                 Math.floor(Math.random() * request.data.results.length - 1)]);\r\n                 return request;\r\n               \r\n            \r\n        }\r\n        \r\n        fetchData();\r\n    }, []);\r\n\r\n\r\n    console.log(movie);\r\n\r\n\r\n    function truncate(str,n){\r\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n    }\r\n\r\n\r\n    return (\r\n        <header className=\"banner\" \r\n        style={{\r\n            backgroundSize:\"cover\",\r\n            backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n            backgroundPosition: \"center center\",\r\n        }}>\r\n         <div className= \"banner__contents\">\r\n          <h1 className=\"banner__title\">\r\n              {movie?.title || movie?.name || movie?.original_name}\r\n          </h1>\r\n       \r\n          <div className=\"banner__buttons\">\r\n              <button className=\"banner__button\">Play</button>\r\n              <button className=\"banner__button\">My List</button>\r\n          </div>\r\n\r\n          <h1 className =\"banner__description\">\r\n              {truncate(movie.overview,150)}\r\n          </h1>\r\n        \r\n         </div>\r\n\r\n         <div className=\"banner--fadebottom\" />\r\n\r\n\r\n\r\n        </header>\r\n            \r\n        \r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useEffect, useState } from 'react'\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n\r\n    const [show, handleShow]= useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () => {\r\n            if (window.scrollY > 100) {\r\n                handleShow(true);\r\n            } else handleShow(false);\r\n        });\r\n\r\n        return () => {\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n    },[]);\r\n\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n            <img className=\"nav__logo\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\" alt=\"Netflix Logo\" />\r\n            \r\n            <img className=\"nav__avatar\" src=\"https://ih0.redbubble.net/image.618427277.3222/flat,1000x1000,075,f.u2.jpg\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n\n      {/*nav*/}\n      <Nav />\n\n      <Banner />\n    \n      <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}